[versions]
java = "21"
spring-boot = "3.2.0"
spring-cloud = "2023.0.0"
aspectj = "1.9.20.1"
lombok = "1.18.30"
mapstruct = "1.5.5.Final"
junit = "5.10.1"
testcontainers = "1.19.3"
micrometer = "1.12.0"

[libraries]
# Spring Boot Starters
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-aop = { module = "org.springframework.boot:spring-boot-starter-aop" }
spring-boot-starter-cache = { module = "org.springframework.boot:spring-boot-starter-cache" }
#spring-boot-starter-data-redis = { module = "org.springframework.boot:spring-boot-starter-data-redis" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }

# Spring Cloud
spring-cloud-starter-gateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway" }
spring-cloud-starter-circuitbreaker-reactor-resilience4j = { module = "org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j" }

# AspectJ
aspectjweaver = { module = "org.aspectj:aspectjweaver", version.ref = "aspectj" }

# Development Tools
lombok = { module = "org.projectlombok:lombok", version.ref = "lombok" }
# TODO: remove mapstruct?
#mapstruct = { module = "org.mapstruct:mapstruct", version.ref = "mapstruct" }
#mapstruct-processor = { module = "org.mapstruct:mapstruct-processor", version.ref = "mapstruct" }

# Database
h2 = { module = "com.h2database:h2" }
postgresql = { module = "org.postgresql:postgresql" }

# Observability
#micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus" }
#micrometer-tracing-bridge-otel = { module = "io.micrometer:micrometer-tracing-bridge-otel" }

# Testing
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-junit-jupiter = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }

[bundles]
spring-web = ["spring-boot-starter-web", "spring-boot-starter-validation", "spring-boot-starter-actuator"]
spring-data = ["spring-boot-starter-data-jpa", "spring-boot-starter-cache"]
testing = ["spring-boot-starter-test", "junit-jupiter", "testcontainers", "testcontainers-junit-jupiter"]

[plugins]
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version = "1.1.4" }